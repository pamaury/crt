# Copyright lowRISC contributors.
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

# Warning: with WORKSPACE, this file is executed normally, but with bzlmod
# it will be executed in its own repository so all path to the crt repository
# must be absolute and all other paths must be relative. See repository.bzl.

load("@crt//config:compiler.bzl", "setup")
load("@crt//config:features.bzl", "feature", "ALL_ACTIONS")
load("@crt//platforms/arm:devices.bzl", "DEVICES")
load("@bazel_tools//tools/build_defs/cc:action_names.bzl", "ACTION_NAMES")
load("@bazel_skylib//lib:dicts.bzl", "dicts")

package(default_visibility = ["//visibility:public"])

SYSTEM_INCLUDE_PATHS = [
    "GCC_ARM_NONE_EABI_FILES/arm-none-eabi/include",
    "GCC_ARM_NONE_EABI_FILES/arm-none-eabi/include/c++/10.3.1",
    "GCC_ARM_NONE_EABI_FILES/arm-none-eabi/include/c++/10.3.1/arm-none-eabi",
    "GCC_ARM_NONE_EABI_FILES/arm-none-eabi/include/c++/10.3.1/backward",
    "GCC_ARM_NONE_EABI_FILES/arm-none-eabi/include/newlib-nano",
    "GCC_ARM_NONE_EABI_FILES/lib/gcc/arm-none-eabi/10.3.1/include",
    "GCC_ARM_NONE_EABI_FILES/lib/gcc/arm-none-eabi/10.3.1/include-fixed",
]

filegroup(
    name = "compiler_components",
    srcs = glob(["wrappers/*"]) + [
        "@gcc_arm_none_eabi_files//:all",
    ],
)

[setup(
    name = device.name,
    architecture = device.architecture,
    artifact_naming = device.artifact_naming,
    compiler_components = ":compiler_components",
    constraints = device.constraints,
    feature_set = device.feature_set,
    include_directories = SYSTEM_INCLUDE_PATHS,
    params = {
        "compiler": "gcc",
    },
    env_vars = {
        "GCC_ARM_NONE_EABI_FILES": "GCC_ARM_NONE_EABI_FILES",
    },
    substitutions = dicts.add(device.substitutions, {
        "GCC_ARM_NONE_EABI_FILES": "$(execpath @gcc_arm_none_eabi_files//:.)",
    }),
    subst_deps = ["@gcc_arm_none_eabi_files//:."],
    tools = {
        "ar": "wrappers/ar",
        "cpp": "wrappers/cpp",
        "gcc": "wrappers/gcc",
        "gcov": "wrappers/gcov",
        "ld": "wrappers/ld",
        "nm": "wrappers/nm",
        "objcopy": "wrappers/objcopy",
        "objdump": "wrappers/objdump",
        "strip": "wrappers/strip",
    },
) for device in DEVICES]
